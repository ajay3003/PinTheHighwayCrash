@page "/report"
@inject IJSRuntime JS
@inject PinTheHighwayCrash.Services.GeoService Geo

<h1>Report Highway Crash (India)</h1>

@if (_loading)
{
    <p>Getting your location…</p>
}
else if (_error is not null)
{
    <p class="text-danger">@_error</p>
}
else
{
    <div class="mb-2">
        <button class="btn btn-secondary me-2" @onclick="CenterOnMe">Center on Me</button>
        <button class="btn btn-outline-primary" @onclick="SetPinToMe">Set Pin to My Location</button>
    </div>

    <div id="map" style="height: 420px; border-radius: 10px; margin-bottom: 1rem;"></div>

    <div class="mb-2">
        <strong>Your GPS:</strong> @_meLat:F6, @_meLng:F6 (± @_accuracy m)<br />
        <strong>Pinned:</strong> @_pinLat:F6, @_pinLng:F6<br />
        <strong>Distance:</strong> @(_distanceMeters is null ? "—" : $"{_distanceMeters:F0} m")
        @if (_distanceMeters is not null && _distanceMeters > _maxAllowedMeters)
        {
            <span class="text-danger"> (Too far to submit)</span>
        }
    </div>

    <div class="mb-3">
        <label class="form-label">What happened? (optional)</label>
        <textarea class="form-control" @bind="_note" rows="3"
                  placeholder="e.g., multi-vehicle crash, fire, blockage, injuries"></textarea>
    </div>

    <div class="d-flex flex-wrap gap-2">
        <button class="btn btn-danger" disabled="@(!CanSend)" @onclick="Call112">Call 112</button>
        <button class="btn btn-warning" disabled="@(!CanSend)" @onclick="SendSms">SMS (prefilled)</button>
        <button class="btn btn-success" disabled="@(!CanSend)" @onclick="SendWhatsApp">WhatsApp (prefilled)</button>
        <button class="btn btn-outline-secondary" @onclick="CopyReport">Copy Text</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(_submitMsg))
    {
        <p class="mt-3">@_submitMsg</p>
    }
}

@code {
    private bool _loading = true;
    private string? _error;
    private double _meLat, _meLng, _accuracy;
    private double _pinLat, _pinLng;
    private double? _distanceMeters;
    private const int _maxAllowedMeters = 150; // must be at scene
    private string? _note;
    private string? _submitMsg;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var pos = await Geo.GetCurrentPositionAsync();
        if (pos is null)
        {
            _error = "Location permission denied or unavailable.";
            _loading = false;
            StateHasChanged();
            return;
        }

        _meLat = pos.Latitude; _meLng = pos.Longitude; _accuracy = Math.Round(pos.AccuracyMeters);
        _pinLat = _meLat; _pinLng = _meLng;

        await JS.InvokeVoidAsync("mapInterop.initMap", "map", _meLat, _meLng, DotNetObjectReference.Create(this));
        UpdateDistance();
        _loading = false;
        StateHasChanged();
    }

    [JSInvokable]
    public Task OnMapMarkerMoved(double lat, double lng)
    {
        _pinLat = lat; _pinLng = lng;
        UpdateDistance();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task CenterOnMe()
    {
        var pos = await Geo.GetCurrentPositionAsync();
        if (pos is null) return;
        _meLat = pos.Latitude; _meLng = pos.Longitude; _accuracy = Math.Round(pos.AccuracyMeters);
        await JS.InvokeVoidAsync("mapInterop.setView", _meLat, _meLng);
        UpdateDistance();
    }

    private async Task SetPinToMe()
    {
        var pos = await Geo.GetCurrentPositionAsync();
        if (pos is null) return;
        _pinLat = pos.Latitude; _pinLng = pos.Longitude;
        await JS.InvokeVoidAsync("mapInterop.setView", _pinLat, _pinLng);
        UpdateDistance();
    }

    private void UpdateDistance()
    {
        _distanceMeters = PinTheHighwayCrash.Services.GeoService.HaversineMeters(_meLat, _meLng, _pinLat, _pinLng);
    }

    private bool CanSend => _distanceMeters is not null && _distanceMeters <= _maxAllowedMeters;

    private string BuildReportText()
    {
        var maps = $"https://maps.google.com/?q={_pinLat:F6},{_pinLng:F6}";
        var note = string.IsNullOrWhiteSpace(_note) ? "" : $"Note: {_note}\n";
        return $"EMERGENCY: Highway accident reported.\n" +
               $"Pinned Location: {_pinLat:F6}, {_pinLng:F6}\n" +
               $"Reporter GPS: {_meLat:F6}, {_meLng:F6} (±{_accuracy} m)\n" +
               $"{note}" +
               $"Map: {maps}\n" +
               $"Time (UTC): {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}";
    }

    private async Task Call112()
    {
        if (!CanSend) { _submitMsg = "You must be at the pinned location to call from this screen."; return; }
        await JS.InvokeVoidAsync("shareInterop.openUrl", "tel:112");
    }

    private async Task SendSms()
    {
        if (!CanSend) { _submitMsg = "You must be at the pinned location to send."; return; }
        var body = Uri.EscapeDataString(BuildReportText());
        var url = $"sms:?&body={body}";
        await JS.InvokeVoidAsync("shareInterop.openUrl", url);
        _submitMsg = "Opened your SMS app with the message prefilled. Send it to 112 or local police.";
    }

    private async Task SendWhatsApp()
    {
        if (!CanSend) { _submitMsg = "You must be at the pinned location to send."; return; }
        var text = Uri.EscapeDataString(BuildReportText());
        var url = $"https://wa.me/?text={text}";
        await JS.InvokeVoidAsync("shareInterop.openUrl", url);
        _submitMsg = "Opened WhatsApp share. Choose recipient (e.g., emergency contact).";
    }

    private async Task CopyReport()
    {
        var ok = await JS.InvokeAsync<bool>("shareInterop.copyText", BuildReportText());
        _submitMsg = ok ? "Copied report text to clipboard." : "Copy failed.";
    }
}
