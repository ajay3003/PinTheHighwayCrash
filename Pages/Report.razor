@* PinTheHighwayCrash/Pages/Report.razor *@
@page "/report"
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Options
@using PinTheHighwayCrash.Models
@using PinTheHighwayCrash.Services
@using PinTheHighwayCrash.Shared
@inject IJSRuntime JS
@inject GeoService Geo
@inject VerificationService Verify
@inject IOptions<EmergencyOptions> EmergencyOpts
@inject IOptions<GeoOptions> GeoOpts
@inject IAntiSpamService AntiSpam
@inject SettingsService Settings
@implements IDisposable

<h1>Report Highway Crash (@_country)</h1>

<OfflineBadge />

@if (_loading)
{
    <div class="d-flex align-items-center gap-2">
        <div class="spinner-border spinner-border-sm text-primary" role="status" aria-hidden="true"></div>
        <span>Getting your location‚Ä¶</span>
    </div>
}
else
{
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="alert alert-warning" role="alert">
            <strong>‚ö†Ô∏è Unable to get location:</strong> @_error
            <div class="mt-1">
                You can still <b>manually pin</b> the crash location on the map below.
            </div>
            <button class="btn btn-outline-primary mt-3" @onclick="Retry">Retry</button>
            <a class="btn btn-link mt-3" href="health">Run Health Check</a>
        </div>
    }

    @* Fallback input ONLY when GPS fix is unavailable *@
    @if (!_hasRealFix)
    {
        <div class="container-card mb-3">
            <label for="pasteBox" class="form-label mb-1">Paste a Google Maps link, Plus Code, or coordinates</label>
            <div class="d-flex gap-2 flex-wrap">
                <input id="pasteBox"
                       class="form-control"
                       style="max-width: 520px"
                       @bind="_manualInput"
                       placeholder='e.g. 19.0760, 72.8777  ‚Ä¢  7JW5+6V Mumbai  ‚Ä¢  https://maps.google.com/?q=19.0760,72.8777' />
                <button class="btn btn-outline-primary" @onclick="UsePasted">Use location</button>
            </div>
            @if (!string.IsNullOrWhiteSpace(_manualMsg))
            {
                <div class="small mt-2 text-muted">@_manualMsg</div>
            }
        </div>
    }

    <div class="mb-2">
        <button class="btn btn-outline-secondary me-2" @onclick="CenterOnMe">Center on Me</button>
        <button class="btn btn-outline-primary" @onclick="SetPinToMyLocationAndView">Set Pin to My Location</button>
    </div>

    <div id="map" style="height: 420px; border-radius: 10px; margin-bottom: 1rem;"></div>

    <div class="mb-2">
        <strong>Your GPS:</strong> @_meLat:F6, @_meLng:F6 (¬± @_accuracy m)
        @(!_hasRealFix ? "(no real fix)" : "")
        <br />
        <strong>Pinned:</strong> @_pinLat:F6, @_pinLng:F6
        <br />
        <strong>Distance:</strong> @(_distanceMeters is null ? "‚Äî" : $"{_distanceMeters:F0} m")
        @if (_distanceMeters is not null && _distanceMeters > _maxAllowedMeters)
        {
            <span class="text-danger"> (Too far to submit)</span>
        }

        @if (_onRoadCheckEnabled)
        {
            <div class="mt-2">
                @if (_verifyingRoad)
                {
                    <span class="text-muted">Checking if on road‚Ä¶</span>
                }
                else if (_onRoad == true)
                {
                    <span class="text-success">‚úÖ On road (verified)</span>
                }
                else if (_onRoad == false)
                {
                    <span class="text-danger">‚ö†Ô∏è Not on a road (off-road)</span>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label class="form-label">What happened? (optional)</label>
        <textarea class="form-control" @bind="_note" rows="3"
                  placeholder="e.g., multi-vehicle crash, fire, blockage, injuries"></textarea>
    </div>

    @* ----------------------- ACTION PANEL ----------------------- *@
    <div class="d-grid gap-2 mt-3">
        @* --- CALL --- *@
        @if (_enableCall)
        {
            if (CanSend)
            {
                <CooldownButton ActionKey="call"
                                Css="btn btn-danger w-100 btn-lg fw-bold"
                                Text=@($"üìû Call {_phone}")
                                OnClick="CallEmergency" />
            }
            else
            {
                <button class="btn btn-danger w-100 btn-lg fw-bold"
                        disabled
                        title="You must be on a verified road and near the pinned location.">
                    üìû Call @_phone
                </button>
            }
        }

        @* --- SMS --- *@
        @if (_enableSms)
        {
            if (CanSend)
            {
                <CooldownButton ActionKey="sms"
                                Css="btn btn-warning w-100 btn-lg fw-bold text-dark"
                                Text="‚úâÔ∏è SMS"
                                OnClick="SendSms" />
            }
            else
            {
                <button class="btn btn-warning w-100 btn-lg fw-bold text-dark"
                        disabled
                        title="You must be on a verified road and near the pinned location.">
                    ‚úâÔ∏è SMS
                </button>
            }
        }

        @* --- WHATSAPP --- *@
        @if (_enableWhatsApp)
        {
            if (CanSend)
            {
                <CooldownButton ActionKey="whatsapp"
                                Css="btn btn-success w-100 btn-lg fw-bold"
                                Text="üí¨ WhatsApp"
                                OnClick="SendWhatsApp" />
            }
            else
            {
                <button class="btn btn-success w-100 btn-lg fw-bold"
                        disabled
                        title="You must be on a verified road and near the pinned location.">
                    üí¨ WhatsApp
                </button>
            }
        }

        @* --- EMAIL --- *@
        @if (_enableEmail)
        {
            if (CanSend)
            {
                <CooldownButton ActionKey="email"
                                Css="btn btn-outline-info w-100 btn-lg fw-bold"
                                Text="üìß Email"
                                OnClick="SendEmail" />
            }
            else
            {
                <button class="btn btn-outline-info w-100 btn-lg fw-bold"
                        disabled
                        title="You must be on a verified road and near the pinned location.">
                    üìß Email
                </button>
            }
        }

        <button class="btn btn-outline-secondary w-100" @onclick="CopyReport">
            üìã Copy Text
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(_submitMsg))
    {
        <p class="mt-3">@_submitMsg</p>
    }
}

@code {
    private bool _loading = true;
    private string? _error;
    private bool _hasRealFix;
    private double _meLat, _meLng, _accuracy;
    private double _pinLat, _pinLng;
    private double? _distanceMeters;
    private string? _note;
    private string? _submitMsg;

    // Fallback UI state (shown only when !_hasRealFix)
    private string? _manualInput;
    private string? _manualMsg;

    private bool _onRoadCheckEnabled;
    private bool? _onRoad;
    private bool _verifyingRoad;

    private int _maxAllowedMeters = 150;

    private string _phone = "112";
    private string? _whatsApp;
    private string? _email;
    private string _country = "IN";
    private bool _enableCall, _enableSms, _enableWhatsApp, _enableEmail;

    private const double FallbackLat = 20.5937;
    private const double FallbackLng = 78.9629;

    private DotNetObjectReference<Report>? _selfRef;

    protected override Task OnInitializedAsync()
    {
        // ---- appsettings defaults ----
        var e = EmergencyOpts.Value;
        _country = e.Country ?? "IN";
        _phone = e.Phone ?? "112";
        _whatsApp = e.WhatsAppNumber;
        _email = e.Email;
        _enableCall = e.EnableCall;
        _enableSms = e.EnableSms;
        _enableWhatsApp = e.EnableWhatsApp;
        _enableEmail = e.EnableEmail;

        var geo = GeoOpts.Value;
        _maxAllowedMeters = geo.MaxDistanceMeters;
        _onRoadCheckEnabled = geo.OnRoadVerification.Enabled;

        // ---- Admin overrides (device-local) ----
        var s = Settings.Current;
        if (s is not null)
        {
            if (s.GeofenceKm > 0) _maxAllowedMeters = (int)Math.Round(s.GeofenceKm * 1000);

            if (s.Channels is not null)
            {
                _enableCall = s.Channels.Call;
                _enableSms = s.Channels.Sms;
                _enableEmail = s.Channels.Email;
                _enableWhatsApp = s.Channels.WhatsApp;
            }
            // NOTE: Phone/email targets remain from appsettings. If you later add admin-side targets,
            // map them here similarly.
        }

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await FirstLoad();
    }

    private async Task FirstLoad()
    {
        var result = await Geo.TryGetCurrentPositionAsync(timeoutMs: 10000, highAccuracy: true);

        if (!result.IsSuccess || result.Position is null)
        {
            _hasRealFix = false;
            _error = result.ErrorMessage ?? "Could not get location.";
            _meLat = FallbackLat; _meLng = FallbackLng; _accuracy = 9999;
            _pinLat = _meLat; _pinLng = _meLng;
            _manualMsg = "GPS blocked/unavailable ‚Äî paste a link, Plus Code, or coordinates to set the pin.";
        }
        else
        {
            _hasRealFix = true;
            _error = null;
            _meLat = result.Position.Latitude;
            _meLng = result.Position.Longitude;
            _accuracy = Math.Round(result.Position.AccuracyMeters);
            _pinLat = _meLat; _pinLng = _meLng;
        }

        UpdateDistance();

        _loading = false;
        StateHasChanged();

        await EnsureMapInitialized(_pinLat, _pinLng);

        if (_onRoadCheckEnabled)
            await VerifyIfOnRoad();
    }

    private async Task EnsureMapInitialized(double lat, double lng)
    {
        _selfRef ??= DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("mapInterop.initMap", "map", lat, lng, _selfRef);
    }

    [JSInvokable]
    public async Task OnMapMarkerMoved(double lat, double lng)
    {
        _pinLat = lat; _pinLng = lng;
        UpdateDistance();
        if (_onRoadCheckEnabled)
            await VerifyIfOnRoad();
        StateHasChanged();
    }

    private void UpdateDistance()
    {
        _distanceMeters = GeoService.HaversineMeters(_meLat, _meLng, _pinLat, _pinLng);
    }

    private bool CanSend =>
        _hasRealFix &&
        _distanceMeters is not null &&
        _distanceMeters <= _maxAllowedMeters &&
        (!_onRoadCheckEnabled || _onRoad == true);

    private async Task VerifyIfOnRoad()
    {
        _verifyingRoad = true;
        _onRoad = null;
        StateHasChanged();

        try
        {
            var res = await Verify.VerifyIfOnRoadAsync(_pinLat, _pinLng);
            _onRoad = res.IsOnRoad;
        }
        catch
        {
            _onRoad = null;
        }
        finally
        {
            _verifyingRoad = false;
            StateHasChanged();
        }
    }

    // --------- Fallback: ‚ÄúUse pasted‚Äù (shown only when !_hasRealFix) ----------
    private async Task UsePasted()
    {
        _manualMsg = null;
        var raw = _manualInput?.Trim();
        if (string.IsNullOrWhiteSpace(raw))
        {
            _manualMsg = "Paste a link, Plus Code, or coordinates.";
            return;
        }

        // 1) Strict lat,lng
        if (TryParseLatLng(raw, out var lat, out var lng))
        {
            await ApplyManualLocation(lat, lng, "Using pasted coordinates.");
            return;
        }

        // 2) Extract from common Google Maps links
        if (TryExtractLatLngFromCommonMapsLinks(raw, out lat, out lng))
        {
            await ApplyManualLocation(lat, lng, "Using coordinates from link.");
            return;
        }

        // 3) Fallback to forward geocoding
        var hit = await Verify.ForwardGeocodeAsync(raw);
        if (hit is not null)
        {
            await ApplyManualLocation(hit.Lat, hit.Lng, hit.Label is null ? "Location resolved." : $"Location: {hit.Label}");
            return;
        }

        _manualMsg = "Could not read a location from what you pasted.";
    }

    private static bool TryParseLatLng(string raw, out double lat, out double lng)
    {
        lat = lng = 0;
        var m = Regex.Match(raw, @"^\s*([+-]?\d+(?:\.\d+)?)\s*[, ]\s*([+-]?\d+(?:\.\d+)?)\s*$");
        if (!m.Success) return false;
        if (!double.TryParse(m.Groups[1].Value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out lat)) return false;
        if (!double.TryParse(m.Groups[2].Value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out lng)) return false;
        return lat is >= -90 and <= 90 && lng is >= -180 and <= 180;
    }

    private static bool TryExtractLatLngFromCommonMapsLinks(string raw, out double lat, out double lng)
    {
        lat = lng = 0;

        // Pattern A: ...?q=lat,lng
        var q = Regex.Match(raw, @"[?&]q=([+-]?\d+(?:\.\d+)?),\s*([+-]?\d+(?:\.\d+)?)", RegexOptions.IgnoreCase);
        if (q.Success &&
            double.TryParse(q.Groups[1].Value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out lat) &&
            double.TryParse(q.Groups[2].Value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out lng))
        {
            return lat is >= -90 and <= 90 && lng is >= -180 and <= 180;
        }

        // Pattern B: .../@lat,lng,zoomz
        var at = Regex.Match(raw, @"/@([+-]?\d+(?:\.\d+)?),\s*([+-]?\d+(?:\.\d+)?),\d+(?:\.\d+)?z", RegexOptions.IgnoreCase);
        if (at.Success &&
            double.TryParse(at.Groups[1].Value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out lat) &&
            double.TryParse(at.Groups[2].Value, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out lng))
        {
            return lat is >= -90 and <= 90 && lng is >= -180 and <= 180;
        }

        return false;
    }

    private async Task ApplyManualLocation(double lat, double lng, string msg)
    {
        _pinLat = lat; _pinLng = lng;
        await JS.InvokeVoidAsync("mapInterop.setView", _pinLat, _pinLng);
        UpdateDistance();
        if (_onRoadCheckEnabled)
            await VerifyIfOnRoad();
        _manualMsg = msg;
        StateHasChanged();
    }

    // -------------------------------------------------------------------------
    // Actions with AntiSpam guard + record

    private async Task CallEmergency()
    {
        if (!CanSend)
        {
            _submitMsg = "You must be on a verified road and near the pinned location.";
            return;
        }

        var decision = await AntiSpam.GuardAsync("call", _pinLat, _pinLng);
        if (!decision.Allowed)
        {
            _submitMsg = decision.Reason;
            return;
        }

        await JS.InvokeVoidAsync("shareInterop.openUrl", $"tel:{_phone}");
        await AntiSpam.RecordAsync("call", _pinLat, _pinLng);
    }

    private async Task SendSms()
    {
        if (!CanSend)
        {
            _submitMsg = "You must be on a verified road and near the pinned location.";
            return;
        }

        var decision = await AntiSpam.GuardAsync("sms", _pinLat, _pinLng);
        if (!decision.Allowed)
        {
            _submitMsg = decision.Reason;
            return;
        }

        var body = Uri.EscapeDataString(BuildReportText());
        var url = $"sms:{_phone}?&body={body}";
        await JS.InvokeVoidAsync("shareInterop.openUrl", url);
        _submitMsg = $"Opened SMS app prefilled to {_phone}.";

        await AntiSpam.RecordAsync("sms", _pinLat, _pinLng);
    }

    private static string NormalizeWhatsApp(string? raw)
    {
        if (string.IsNullOrWhiteSpace(raw)) return string.Empty;
        var sb = new System.Text.StringBuilder(raw.Length);
        foreach (var ch in raw)
            if (char.IsDigit(ch)) sb.Append(ch);
        return sb.ToString();
    }

    private async Task SendWhatsApp()
    {
        if (!_enableWhatsApp || string.IsNullOrWhiteSpace(_whatsApp))
        {
            _submitMsg = "WhatsApp not configured.";
            return;
        }
        if (!CanSend)
        {
            _submitMsg = "You must be on a verified road and near the pinned location.";
            return;
        }

        var decision = await AntiSpam.GuardAsync("whatsapp", _pinLat, _pinLng);
        if (!decision.Allowed)
        {
            _submitMsg = decision.Reason;
            return;
        }

        var number = NormalizeWhatsApp(_whatsApp);
        if (string.IsNullOrWhiteSpace(number))
        {
            _submitMsg = "WhatsApp number is invalid.";
            return;
        }

        var text = Uri.EscapeDataString(BuildReportText());
        var url = $"https://wa.me/{number}?text={text}";
        await JS.InvokeVoidAsync("shareInterop.openUrl", url);
        _submitMsg = "Opened WhatsApp share.";

        await AntiSpam.RecordAsync("whatsapp", _pinLat, _pinLng);
    }

    private async Task SendEmail()
    {
        if (!_enableEmail || string.IsNullOrWhiteSpace(_email))
        {
            _submitMsg = "Email not configured.";
            return;
        }

        var decision = await AntiSpam.GuardAsync("email", _pinLat, _pinLng);
        if (!decision.Allowed)
        {
            _submitMsg = decision.Reason;
            return;
        }

        var subject = Uri.EscapeDataString("EMERGENCY: Highway accident");
        var body = Uri.EscapeDataString(BuildReportText());
        var url = $"mailto:{_email}?subject={subject}&body={body}";
        await JS.InvokeVoidAsync("shareInterop.openUrl", url);
        _submitMsg = $"Opened email composer to {_email}.";

        await AntiSpam.RecordAsync("email", _pinLat, _pinLng);
    }

    private async Task CopyReport()
    {
        var ok = await JS.InvokeAsync<bool>("shareInterop.copyText", BuildReportText());
        _submitMsg = ok ? "Copied report text to clipboard." : "Copy failed.";
    }

    private async Task CenterOnMe()
    {
        var result = await Geo.TryGetCurrentPositionAsync(timeoutMs: 8000, highAccuracy: true);
        if (!result.IsSuccess || result.Position is null)
        {
            _submitMsg = "No GPS fix available.";
            return;
        }
        _hasRealFix = true;
        _meLat = result.Position.Latitude;
        _meLng = result.Position.Longitude;
        _accuracy = Math.Round(result.Position.AccuracyMeters);
        await JS.InvokeVoidAsync("mapInterop.setView", _meLat, _meLng);
        UpdateDistance();
        if (_onRoadCheckEnabled)
            await VerifyIfOnRoad();
    }

    private async Task SetPinToMyLocationAndView()
    {
        var result = await Geo.TryGetCurrentPositionAsync(timeoutMs: 8000, highAccuracy: true);
        if (!result.IsSuccess || result.Position is null)
        {
            _submitMsg = "No GPS fix available.";
            return;
        }
        _hasRealFix = true;
        _pinLat = result.Position.Latitude;
        _pinLng = result.Position.Longitude;
        await JS.InvokeVoidAsync("mapInterop.setView", _pinLat, _pinLng);
        UpdateDistance();
        if (_onRoadCheckEnabled)
            await VerifyIfOnRoad();
    }

    private async Task Retry() => await FirstLoad();

    private string BuildReportText()
    {
        var maps = $"https://maps.google.com/?q={_pinLat:F6},{_pinLng:F6}";
        var road = _onRoad == true ? "On a road (verified)"
                 : _onRoad == false ? "Off-road"
                 : "Road status unknown";

        // Default message (if no Admin template)
        var defaultText =
            $"EMERGENCY: Highway accident reported.\n" +
            $"Pinned Location: {_pinLat:F6}, {_pinLng:F6}\n" +
            $"Reporter GPS: {_meLat:F6}, {_meLng:F6} (¬±{_accuracy} m)\n" +
            $"{(string.IsNullOrWhiteSpace(_note) ? "" : $"Note: {_note}\n")}" +
            $"Road Status: {road}\n" +
            $"Map: {maps}\n" +
            $"Time (UTC): {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}";

        var tmpl = Settings.Current?.Templates;
        if (tmpl is null) return defaultText;

        // Prefer Admin SMS template for short shares (works fine for email too)
        var template = !string.IsNullOrWhiteSpace(tmpl.Sms) ? tmpl.Sms : defaultText;

        var composed = template
            .Replace("{location}", _country ?? "")
            .Replace("{coords}", $"{_pinLat:F6},{_pinLng:F6}")
            .Replace("{timestamp}", $"{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC")
            .Replace("{details}", _note ?? "");

        // If the admin template didn‚Äôt include a maps link, append it for convenience
        if (!template.Contains("{maps}", StringComparison.OrdinalIgnoreCase))
            composed += $"\nMap: {maps}";

        return composed;
    }

    public void Dispose()
    {
        _selfRef?.Dispose();
    }
}
