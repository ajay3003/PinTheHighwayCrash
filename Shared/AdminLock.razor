@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using PinTheHighwayCrash.Services
@using PinTheHighwayCrash.Models

@inject ISettingsStore EncStore
@inject AdminCryptoJs Crypto

@if (_enrolling)
{
    <EditForm EditContext="_enrollCtx" OnValidSubmit="EnrollAsync">
        <DataAnnotationsValidator />
        <div class="card p-3" style="max-width:420px">
            <h5 class="mb-2">Set Admin Passphrase</h5>
            <p class="text-muted mb-3">This protects local settings on this device.</p>

            <InputText @bind-Value="_enroll.Pass1" class="form-control mb-2" type="password" placeholder="Passphrase (min 8 chars)" />
            <InputText @bind-Value="_enroll.Pass2" class="form-control mb-2" type="password" placeholder="Confirm passphrase" />

            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <div class="text-danger small mb-2">@_error</div>
            }

            <button class="btn btn-primary w-100" type="submit">Save</button>
        </div>
    </EditForm>
}
else
{
    <EditForm EditContext="_unlockCtx" OnValidSubmit="UnlockAsync">
        <DataAnnotationsValidator />
        <div class="card p-3" style="max-width:420px">
            <h5 class="mb-2">Admin Unlock</h5>

            <InputText @bind-Value="_unlock.Passphrase" class="form-control mb-2" type="password" placeholder="Enter passphrase" />

            @if (!string.IsNullOrWhiteSpace(_status))
            {
                <div class="text-muted small mb-1">@_status</div>
            }
            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <div class="text-danger small mb-1">@_error</div>
            }

            <button class="btn btn-primary w-100 mt-2" type="submit" disabled="@_lockedOut">Unlock</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public EventCallback OnUnlocked { get; set; }

    private bool _enrolling;
    private bool _lockedOut;
    private string? _error, _status;

    // View-models + edit contexts
    private readonly EnrollVm _enroll = new();
    private EditContext _enrollCtx = default!;
    private readonly UnlockVm _unlock = new();
    private EditContext _unlockCtx = default!;

    protected override async Task OnInitializedAsync()
    {
        // initialize EditContexts
        _enrollCtx = new EditContext(_enroll);
        _unlockCtx = new EditContext(_unlock);

        var has = await EncStore.HasAdminLockAsync();
        _enrolling = !has;
        if (!has)
        {
            _status = "Create a passphrase for this device.";
        }
        else
        {
            await CheckBackoffAsync();
        }
    }

    private async Task EnrollAsync()
    {
        _error = null;

        if (string.IsNullOrWhiteSpace(_enroll.Pass1) || _enroll.Pass1.Length < 8)
        {
            _error = "Use at least 8 characters.";
            return;
        }
        if (_enroll.Pass1 != _enroll.Pass2)
        {
            _error = "Passphrases do not match.";
            return;
        }

        // Derive KEK and wrap a fresh data key
        var salt = await Crypto.RandomB64(16);
        var iterations = 300_000;

        var kek = await Crypto.DeriveKek(_enroll.Pass1!, salt, iterations);
        var dataKey = await Crypto.GenDataKey();
        var wrapped = await Crypto.WrapKey(kek, dataKey);

        DataKeyHolder.Ref = dataKey;

        var wrappedJson = System.Text.Json.JsonSerializer.Serialize(wrapped);
        await EncStore.SetAdminLockAsync(salt, wrappedJson, iterations);

        _enrolling = false;
        _status = null;
        _error = null;
        _enroll.Pass1 = _enroll.Pass2 = string.Empty; // clear secrets
        await OnUnlocked.InvokeAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UnlockAsync()
    {
        _error = null;
        _status = null;

        var info = await EncStore.GetAdminLockFullAsync();
        if (info is null)
        {
            _error = "Admin lock is not initialized.";
            return;
        }

        if (await IsBackedOffAsync(info.Fails, info.LastFailUtc))
        {
            _lockedOut = true;
            return;
        }

        try
        {
            var pass = _unlock.Passphrase ?? string.Empty;
            var kek = await Crypto.DeriveKek(pass, info.SaltBase64, info.Iterations);
            var wrapped = new { iv = info.WrapIv, wrapped = info.WrappedKey };
            var dataKey = await Crypto.UnwrapKey(kek, wrapped);

            DataKeyHolder.Ref = dataKey;
            await EncStore.UpdateFailsAsync(0, null);

            _lockedOut = false;
            _error = null;
            _status = null;
            _unlock.Passphrase = string.Empty; // clear secret
            await OnUnlocked.InvokeAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            var newFails = info.Fails + 1;
            var nowIso = DateTime.UtcNow.ToString("o");
            await EncStore.UpdateFailsAsync(newFails, nowIso);

            _error = "Wrong passphrase.";
            await CheckBackoffAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CheckBackoffAsync()
    {
        var info = await EncStore.GetAdminLockFullAsync();
        if (info is null)
        {
            _lockedOut = false;
            _status = null;
            return;
        }

        _lockedOut = await IsBackedOffAsync(info.Fails, info.LastFailUtc);
    }

    // Exponential backoff: 1s, 5s, 30s, 300s (max 5 min)
    private Task<bool> IsBackedOffAsync(int fails, string? lastFailUtc)
    {
        if (fails <= 0 || string.IsNullOrWhiteSpace(lastFailUtc))
        {
            _status = null;
            return Task.FromResult(false);
        }

        var steps = new[] { 1, 5, 30, 300 };
        var idx = Math.Min(fails - 1, steps.Length - 1);
        var wait = TimeSpan.FromSeconds(steps[idx]);

        if (!DateTime.TryParse(lastFailUtc, null, System.Globalization.DateTimeStyles.AdjustToUniversal, out var last))
        {
            _status = null;
            return Task.FromResult(false);
        }

        var until = last + wait;
        var remaining = until - DateTime.UtcNow;

        if (remaining > TimeSpan.Zero)
        {
            _status = $"Locked. Try again in {Math.Ceiling(remaining.TotalSeconds)}s.";
            return Task.FromResult(true);
        }

        _status = null;
        return Task.FromResult(false);
    }

    // View-models
    private sealed class EnrollVm
    {
        [Required, MinLength(8)]
        public string Pass1 { get; set; } = string.Empty;

        [Required, Compare(nameof(Pass1), ErrorMessage = "Passphrases do not match.")]
        public string Pass2 { get; set; } = string.Empty;
    }

    private sealed class UnlockVm
    {
        [Required]
        public string Passphrase { get; set; } = string.Empty;
    }
}
